name: deploy-frontend-image

on:
  push:
    branches:
      - ci
      - main

env:
  IMAGE_NAME: curmens/procare_frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate Docker tag
        id: set-tag
        run: |
          echo "image_tag=v1-${GITHUB_RUN_NUMBER}" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.image_tag }}
            ${{ env.IMAGE_NAME }}:latest
          platforms: linux/amd64,linux/arm64
          cache-from: |
            type=registry,ref=${{ env.IMAGE_NAME }}:cache-deps
            type=registry,ref=${{ env.IMAGE_NAME }}:cache-builder
            type=registry,ref=${{ env.IMAGE_NAME }}:cache-runner
          cache-to: |
            type=registry,ref=${{ env.IMAGE_NAME }}:cache-deps,mode=max,image-manifest=true,oci-mediatypes=true
            type=registry,ref=${{ env.IMAGE_NAME }}:cache-builder,mode=max,image-manifest=true,oci-mediatypes=true
            type=registry,ref=${{ env.IMAGE_NAME }}:cache-runner,mode=max,image-manifest=true,oci-mediatypes=true
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Kubernetes via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.STAGING_KEY }}
          script: |
            set -e

            IMAGE_TAG=${{ needs.build-and-push.outputs.image_tag }}

            echo "Setting frontend image to: curmens/procare_frontend:${IMAGE_TAG}"

            # Check if kubectl is accessible via sudo
            sudo kubectl version --client

            # Update the deployment image
            sudo kubectl set image deployment/frontend frontend=curmens/procare_frontend:$IMAGE_TAG -n procare

            # Wait for rollout with timeout
            sudo kubectl rollout status deployment/frontend -n procare --timeout=600s

            # Verify deployment
            sudo kubectl get pods -n procare -l app=frontend

            echo "Frontend deployment succeeded"
